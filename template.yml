AWSTemplateFormatVersion: '2010-09-09'
Description: 'Franco Food Monster Game Stack with Existing Amplify App'

Parameters:
  GitHubPersonalAccessToken:
    Type: String
    NoEcho: true
    Description: GitHub Personal Access Token for repository access

  GitHubRepositoryURL:
    Type: String
    Description: Your GitHub repository URL
    Default: 'https://github.com/jjone161/ab3-game'

  CognitoUserPoolId:
    Type: String
    Description: Existing Cognito User Pool ID
    Default: 'us-east-1_OjSZIiDXs'

  CognitoAppClientId:
    Type: String
    Description: Existing Cognito App Client ID
    Default: '7o0sso21vhh0nic2q85lfuajfq'

  ApiGatewayId:
    Type: String
    Description: Existing API Gateway ID
    Default: 'l0tebdk8th'

  AuroraClusterArn:
    Type: String
    Description: Existing Aurora Cluster ARN
    Default: 'arn:aws:rds:us-east-1:575108943146:cluster:food-monster-game'

  ExistingAmplifyAppId:
    Type: String
    Description: Existing Amplify App ID
    Default: 'd2dltd1m02972k'

Resources:
  AmplifyEnvironmentVariables:
    Type: Custom::AmplifyVariables
    Properties:
      ServiceToken: !GetAtt AmplifyVariablesFunction.Arn
      AppId: !Ref ExistingAmplifyAppId
      BranchName: 'main'
      EnvironmentVariables:
        REACT_APP_API_URL: !Sub 'https://${ApiGatewayId}.execute-api.${AWS::Region}.amazonaws.com'
        REACT_APP_USER_POOL_ID: !Ref CognitoUserPoolId
        REACT_APP_USER_POOL_WEB_CLIENT_ID: !Ref CognitoAppClientId
        REACT_APP_REGION: !Ref 'AWS::Region'

  AmplifyVariablesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt AmplifyVariablesRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const amplify = new AWS.Amplify();
          
          exports.handler = async (event, context) => {
            try {
              if (event.RequestType === 'Delete') {
                return await sendResponse(event, context, 'SUCCESS', {});
              }
              
              const { AppId, BranchName, EnvironmentVariables } = event.ResourceProperties;
              
              const params = {
                appId: AppId,
                branchName: BranchName,
                environmentVariables: EnvironmentVariables
              };
              
              await amplify.updateBranch(params).promise();
              
              return await sendResponse(event, context, 'SUCCESS', {
                Message: 'Environment variables updated successfully'
              });
            } catch (error) {
              console.error('Error:', error);
              return await sendResponse(event, context, 'FAILED', {
                Message: error.message
              });
 ;
            }
          };
          
          async function sendResponse(event, context, responseStatus, responseData) {
            const responseBody = JSON.stringify({
              Status: responseStatus,
              Reason: responseData.Message || 'See the details in CloudWatch Log Stream: ' + context.logStreamName,
              PhysicalResourceId: context.logStreamName,
              StackId: event.StackId,
              RequestId: event.RequestId,
              LogicalResourceId: event.LogicalResourceId,
              Data: responseData
            });
            
            return {
              Status: responseStatus,
              Data: responseData
            };
          }

  AmplifyVariablesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AmplifyAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - amplify:UpdateBranch
                  - amplify:GetBranch
                Resource: !Sub 'arn:aws:amplify:${AWS::Region}:${AWS::AccountId}:apps/${ExistingAmplifyAppId}/*'

Outputs:
  AmplifyAppURL:
    Description: Existing Amplify App URL
    Value: 'https://main.d2dltd1m02972k.amplifyapp.com'

  AmplifyAppId:
    Description: Existing Amplify App ID
    Value: !Ref ExistingAmplifyAppId

